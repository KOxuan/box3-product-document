import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"组件生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"package/component/lifecycle.md","filePath":"package/component/lifecycle.md","lastUpdated":1742293853000}');
const _sfc_main = { name: "package/component/lifecycle.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="组件生命周期" tabindex="-1">组件生命周期 <a class="header-anchor" href="#组件生命周期" aria-label="Permalink to &quot;组件生命周期&quot;">​</a></h1><p>该生命周期参考 cocos 引擎的生命周期。</p><p><img src="https://static.codemao.cn/pickduck/SkSU5p821e.svg?hash=Fj7ld7OvQmLlDIGG9EuPM2R0dZW0" alt=""></p><p>组件生命周期是指脚本组件从创建到销毁的整个过程中所经历的一系列预设事件。这些事件定义了组件在不同阶段的行为，帮助开发者有效管理游戏逻辑和资源。以下是组件生命周期的详细解释：</p><h3 id="_1-初始化和准备阶段" tabindex="-1">1. 初始化和准备阶段 <a class="header-anchor" href="#_1-初始化和准备阶段" aria-label="Permalink to &quot;1. 初始化和准备阶段&quot;">​</a></h3><ul><li><p><strong>onLoad()</strong>：组件实例化时调用。这是进行资源加载和数据初始化的最佳时机。可以将其视为组件的&quot;出生&quot;时刻，此时组件开始准备进入游戏世界。</p></li><li><p><strong>start()</strong>：组件初次加载完成后调用。这是设置初始状态、注册事件监听器等操作的理想时机。可以将其视为组件&quot;正式上岗&quot;的时刻。</p></li></ul><h3 id="_2-启用阶段" tabindex="-1">2. 启用阶段 <a class="header-anchor" href="#_2-启用阶段" aria-label="Permalink to &quot;2. 启用阶段&quot;">​</a></h3><ul><li><strong>onEnable()</strong>：组件被启用时调用。通常用于注册事件监听器、启动计时器等需要在组件激活时执行的操作。</li></ul><h3 id="_3-更新阶段" tabindex="-1">3. 更新阶段 <a class="header-anchor" href="#_3-更新阶段" aria-label="Permalink to &quot;3. 更新阶段&quot;">​</a></h3><ul><li><strong>update(deltaTime)</strong>：每帧调用一次，用于实现帧更新逻辑。<code>deltaTime</code> 参数表示自上一帧以来经过的时间（毫秒），可用于时间相关计算，如动画、移动等基于时间的操作。这是游戏逻辑的核心部分，每一帧都在此更新。</li></ul><h3 id="_4-禁用和销毁阶段" tabindex="-1">4. 禁用和销毁阶段 <a class="header-anchor" href="#_4-禁用和销毁阶段" aria-label="Permalink to &quot;4. 禁用和销毁阶段&quot;">​</a></h3><ul><li><p><strong>onDisable()</strong>：组件被禁用时调用。通常用于注销事件监听器、暂停动画或计时器等操作。可以理解为组件&quot;暂时下岗&quot;，不再参与游戏世界的交互。</p></li><li><p><strong>onDestroy()</strong>：组件被销毁时调用。这是进行资源清理的最后机会，如释放内存、注销全局事件监听器等。可以将其视为组件的&quot;终结&quot;时刻，它将从游戏世界中彻底移除。</p></li></ul><p>总的来说，组件生命周期类似于组件的&quot;生命旅程&quot;。通过合理利用这些生命周期回调函数，开发者可以更加有序地管理游戏逻辑和资源，确保游戏流畅运行。每个阶段都有其特定的用途和意义，正确理解并应用这些生命周期方法对于开发高质量游戏至关重要。</p><p><strong>注意：</strong> 以下所有生命周期回调函数的实现都是<strong>可选的</strong>。</p><h2 id="onload" tabindex="-1">onLoad <a class="header-anchor" href="#onload" aria-label="Permalink to &quot;onLoad&quot;">​</a></h2><p><code>onLoad</code> 回调函数在组件实例化时触发，会在 <code>start</code> 和 <code>onEnable</code> 第一次调用之前执行。这是初始化组件内部状态的理想位置。</p><h2 id="start" tabindex="-1">start <a class="header-anchor" href="#start" aria-label="Permalink to &quot;start&quot;">​</a></h2><p><code>start</code> 回调函数在组件初始化完成时触发，会在 <code>update</code> 第一次执行之前调用。通常我们在 <code>start</code> 阶段进行依赖其他组件的初始化操作。</p><h2 id="update" tabindex="-1">update <a class="header-anchor" href="#update" aria-label="Permalink to &quot;update&quot;">​</a></h2><p><code>update</code> 回调函数在游戏世界的每一帧（30 FPS）中触发，用于实现需要持续更新的游戏逻辑。</p><p><strong>参数：</strong> <code>deltaTime</code> - 两次更新之间的时间间隔，单位为毫秒。</p><h2 id="ondestroy" tabindex="-1">onDestroy <a class="header-anchor" href="#ondestroy" aria-label="Permalink to &quot;onDestroy&quot;">​</a></h2><p><code>onDestroy</code> 回调函数在执行 <code>destroy</code> 方法后，且在 <code>update</code> 最后一次执行之后调用。系统会激活 <code>onDestroy</code> 回调并在当前帧结束时统一回收组件资源。</p><h2 id="onenable" tabindex="-1">onEnable <a class="header-anchor" href="#onenable" aria-label="Permalink to &quot;onEnable&quot;">​</a></h2><p><strong>组件初始化阶段：</strong> <code>onEnable</code> 回调在执行 <code>start</code> 回调后、<code>update</code> 开始执行之前调用。</p><p><strong>组件启用阶段：</strong> 当组件的 <code>enabled</code> 属性从 <code>false</code> 变为 <code>true</code> 时，系统会触发 <code>onEnable</code> 回调。</p><p>启用后，<code>update</code> 开始正常执行。</p><p><strong>注意：</strong> 如果设置的 <code>enabled</code> 属性值与当前值相同，则不会触发 <code>onEnable</code> 回调。</p><h2 id="ondisable" tabindex="-1">onDisable <a class="header-anchor" href="#ondisable" aria-label="Permalink to &quot;onDisable&quot;">​</a></h2><p><strong>组件销毁阶段：</strong> <code>onDisable</code> 回调在执行 <code>onDestroy</code> 回调前、<code>update</code> 最后一次执行之后调用。</p><p><strong>组件禁用阶段：</strong> 当组件的 <code>enabled</code> 属性从 <code>true</code> 变为 <code>false</code> 时，系统会触发 <code>onDisable</code> 回调。</p><p>禁用后，<code>update</code> 将暂停执行。</p><p><strong>注意：</strong> 如果设置的 <code>enabled</code> 属性值与当前值相同，则不会触发 <code>onDisable</code> 回调。</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("package/component/lifecycle.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const lifecycle = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  lifecycle as default
};
