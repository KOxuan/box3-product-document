import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"游戏组件化编程：模块化思维的工程实践","description":"","frontmatter":{},"headers":[],"relativePath":"package/component/componentGuide/index.md","filePath":"package/component/componentGuide/index.md","lastUpdated":1742820169000}');
const _sfc_main = { name: "package/component/componentGuide/index.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="游戏组件化编程-模块化思维的工程实践" tabindex="-1">游戏组件化编程：模块化思维的工程实践 <a class="header-anchor" href="#游戏组件化编程-模块化思维的工程实践" aria-label="Permalink to &quot;游戏组件化编程：模块化思维的工程实践&quot;">​</a></h1><p>ECS（Entity-Component-System）是一种游戏开发中常用的架构模式，它将游戏对象拆分为三个核心概念：</p><ul><li><strong>实体（Entity）</strong>：游戏世界中的基本对象</li><li><strong>组件（Component）</strong>：用于存储实体的数据</li><li><strong>系统（System）</strong>：处理特定类型组件的逻辑</li></ul><h2 id="组件系统基础" tabindex="-1">组件系统基础 <a class="header-anchor" href="#组件系统基础" aria-label="Permalink to &quot;组件系统基础&quot;">​</a></h2><p>组件系统是 ECS 架构中的重要部分，它具有以下特点：</p><ol><li>组件只存储数据，不包含业务逻辑</li><li>系统负责处理组件数据，实现具体功能</li><li>实体通过添加或移除组件来获得或失去特定功能</li></ol><h2 id="为什么选择-ecs-架构" tabindex="-1">为什么选择 ECS 架构？ <a class="header-anchor" href="#为什么选择-ecs-架构" aria-label="Permalink to &quot;为什么选择 ECS 架构？&quot;">​</a></h2><ol><li><p><strong>解耦性</strong></p><ul><li>数据（组件）和行为（系统）分离</li><li>实体可以动态组合不同组件</li><li>系统之间相互独立</li></ul></li><li><p><strong>可扩展性</strong></p><ul><li>轻松添加新的组件类型</li><li>系统可以独立扩展</li><li>实体可以灵活配置</li></ul></li><li><p><strong>性能优势</strong></p><ul><li>数据布局更适合缓存</li><li>可以实现高效的并行处理</li><li>方便进行性能优化</li></ul></li></ol><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ol><li><p><strong>组件设计原则</strong></p><ul><li>保持组件数据简单</li><li>避免在组件中包含业务逻辑</li><li>合理划分组件职责</li></ul></li><li><p><strong>系统实现建议</strong></p><ul><li>系统应专注于单一职责</li><li>避免系统之间的直接依赖</li><li>使用事件机制处理系统通信</li></ul></li><li><p><strong>实体管理</strong></p><ul><li>使用实体管理器统一管理实体生命周期</li><li>实现组件的动态添加和移除</li><li>注意实体销毁时的资源回收</li></ul></li></ol><h2 id="与-cocos-creator-的相似性" tabindex="-1">与 Cocos Creator 的相似性 <a class="header-anchor" href="#与-cocos-creator-的相似性" aria-label="Permalink to &quot;与 Cocos Creator 的相似性&quot;">​</a></h2><p>学习 <code>@dao3fun/component</code> 组件系统对于后续使用 Cocos Creator 开发有很大帮助：</p><h3 id="_1-相似的组件概念" tabindex="-1">1. 相似的组件概念 <a class="header-anchor" href="#_1-相似的组件概念" aria-label="Permalink to &quot;1. 相似的组件概念&quot;">​</a></h3><ul><li><p>两者都采用基于组件的设计模式</p></li><li><p>生命周期钩子函数非常相似：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// @dao3fun/component</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">onLoad</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">() {}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">start</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">() {}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">update</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">() {}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">onDestroy</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// Cocos Creator</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">onLoad</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">() {}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">start</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">() {}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">update</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">() {}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">onDestroy</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">() {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><h3 id="_2-类似的组件通信机制" tabindex="-1">2. 类似的组件通信机制 <a class="header-anchor" href="#_2-类似的组件通信机制" aria-label="Permalink to &quot;2. 类似的组件通信机制&quot;">​</a></h3><ul><li><p>节点事件系统</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// @dao3fun/component</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.node.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">emit</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;eventName&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, data);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.node.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">on</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;eventName&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, callback);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// Cocos Creator</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.node.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">emit</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;eventName&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, data);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.node.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">on</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;eventName&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, callback);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h3 id="_3-相同的组件管理方式" tabindex="-1">3. 相同的组件管理方式 <a class="header-anchor" href="#_3-相同的组件管理方式" aria-label="Permalink to &quot;3. 相同的组件管理方式&quot;">​</a></h3><ul><li><p>组件获取和操作</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// @dao3fun/component</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> comp</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> this</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.node.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">getComponent</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(MyComponent);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.node.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">addComponent</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(MyComponent);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// Cocos Creator</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> comp</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> this</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.node.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">getComponent</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(MyComponent);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">.node.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">addComponent</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(MyComponent);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h3 id="_4-类似的开发思维" tabindex="-1">4. 类似的开发思维 <a class="header-anchor" href="#_4-类似的开发思维" aria-label="Permalink to &quot;4. 类似的开发思维&quot;">​</a></h3><ul><li>都强调组件化、模块化开发</li><li>都使用 TypeScript 进行开发</li><li>都采用面向对象的编程范式</li></ul><h3 id="_5-性能优化经验可复用" tabindex="-1">5. 性能优化经验可复用 <a class="header-anchor" href="#_5-性能优化经验可复用" aria-label="Permalink to &quot;5. 性能优化经验可复用&quot;">​</a></h3><ul><li>组件池化管理</li><li>更新频率优化</li><li>资源管理策略</li></ul><p>这些相似性使得你在学习完 <code>@dao3fun/component</code> 后，能够更快地上手 Cocos Creator 的开发。主要区别在于：</p><ol><li>Cocos Creator 提供了更完整的引擎功能</li><li>Cocos Creator 有可视化编辑器</li><li>Cocos Creator 的组件装饰器语法略有不同</li></ol><p>更多 Cocos Creator 相关资源：</p><ul><li><a href="https://docs.cocos.com/creator/manual/zh/" target="_blank" rel="noreferrer">Cocos Creator 官方文档</a></li><li><a href="https://docs.cocos.com/creator/manual/zh/scripting/component.html" target="_blank" rel="noreferrer">组件系统文档</a></li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("package/component/componentGuide/index.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const index = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  index as default
};
