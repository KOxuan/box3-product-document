import { ssrRenderAttrs, ssrRenderStyle, ssrRenderAttr } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const _imports_0 = "/arenapro/QQ20241204-212524.png";
const _imports_1 = "/arenapro/QQ20241204-212656.png";
const __pageData = JSON.parse('{"title":"Node.js 部署 Arena-Ts 问题指南","description":"","frontmatter":{},"headers":[],"relativePath":"bestPractices/nodejsTest.md","filePath":"bestPractices/nodejsTest.md","lastUpdated":1733319052000}');
const _sfc_main = { name: "bestPractices/nodejsTest.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="node-js-部署-arena-ts-问题指南" tabindex="-1">Node.js 部署 Arena-Ts 问题指南 <a class="header-anchor" href="#node-js-部署-arena-ts-问题指南" aria-label="Permalink to &quot;Node.js 部署 Arena-Ts 问题指南&quot;">​</a></h1><h2 id="解决-windows-禁止运行脚本的问题" tabindex="-1">解决 Windows 禁止运行脚本的问题 <a class="header-anchor" href="#解决-windows-禁止运行脚本的问题" aria-label="Permalink to &quot;解决 Windows 禁止运行脚本的问题&quot;">​</a></h2><p>在 Windows 系统上，你可能会遇到以下错误消息：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">npm</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> :</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> 无法加载文件</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> C:</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">\\P</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">rogramFiles</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">\\n</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">odejs</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">\\n</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">pm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> https://go.microsoft.com/fwlink/?LinkID=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">135170</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> 中的</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> about_Execution_Policies。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">所在位置</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> 行:1</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> 字符:</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 1</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">+</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> npm</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> i</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">+</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> ~~~</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">    +</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> CategoryInfo</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">          :</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> SecurityError:</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (:) []，PSSecurityException</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">    +</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> FullyQualifiedErrorId</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> :</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> UnauthorizedAccess</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="解决方案步骤" tabindex="-1">解决方案步骤 <a class="header-anchor" href="#解决方案步骤" aria-label="Permalink to &quot;解决方案步骤&quot;">​</a></h3><ol><li><p><strong>以管理员身份运行 PowerShell</strong></p><p><img${ssrRenderAttr("src", _imports_0)} alt="PowerShell 以管理员身份运行"></p></li><li><p><strong>更改执行策略</strong></p><p>在 PowerShell 中输入以下命令，将执行策略更改为 <code>RemoteSigned</code>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">set-ExecutionPolicy</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> RemoteSigned</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>系统会提示你确认更改，输入 <code>Y</code> 并按回车。</p><p><img${ssrRenderAttr("src", _imports_1)} alt="更改执行策略"></p></li><li><p><strong>重启 VSCode 编辑器</strong></p><p>重启你的 VSCode 编辑器后，再次执行命令，将不会再弹出禁止运行脚本的提示。</p></li></ol><h2 id="检查-node-js-是否已安装" tabindex="-1">检查 Node.js 是否已安装 <a class="header-anchor" href="#检查-node-js-是否已安装" aria-label="Permalink to &quot;检查 Node.js 是否已安装&quot;">​</a></h2><p>在开始部署之前，确保你的系统上已经安装了 Node.js。你可以通过以下步骤进行检查：</p><ol><li><p>打开命令行或终端。</p></li><li><p>输入以下命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">node</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果系统返回了 Node.js 的版本号，则表明你已经安装了 Node.js。如果没有返回任何内容或提示找不到 <code>node</code> 命令，则需要安装 Node.js。</p></li></ol><h2 id="安装或更新-node-js" tabindex="-1">安装或更新 Node.js <a class="header-anchor" href="#安装或更新-node-js" aria-label="Permalink to &quot;安装或更新 Node.js&quot;">​</a></h2><ul><li><p><strong>如果未安装 Node.js</strong>：</p><p>请参考 <a href="./nodejs.html">部署 Node.js 环境</a> 指南进行安装。</p></li><li><p><strong>如果已安装但版本过低</strong>：</p><p>你可以使用 Node.js 的版本管理器 <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer">nvm</a>（Node Version Manager）来管理多个版本的 Node.js，或者直接卸载当前版本并重新安装更高版本的 Node.js。</p></li></ul><h2 id="手动使用-npm-初始化项目" tabindex="-1">手动使用 npm 初始化项目 <a class="header-anchor" href="#手动使用-npm-初始化项目" aria-label="Permalink to &quot;手动使用 npm 初始化项目&quot;">​</a></h2><p>在确认已经安装了 Node.js v20 或更高版本的 LTS 版本后，你可以继续执行 npm 命令。</p><ul><li><p><strong>在 macOS 系统上</strong>：</p><p>你可以在每行命令前面加上 <code>sudo</code> 以管理员权限执行该命令。</p></li><li><p><strong>清除 npx 缓存</strong>（如果之前安装过程中遇到问题）：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">npx</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --registry=https://mirrors.cloud.tencent.com/npm/</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> clear-npx-cache</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>全局安装 <code>create-arena-project</code></strong>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">npm</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --registry=https://mirrors.cloud.tencent.com/npm/</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> i</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> create-arena-project@latest</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> -g</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>请注意，<code>create-arena-project</code> 是一个可以在 npm 上找到的包。</p></li><li><p><strong>初始化项目</strong>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">npm</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> --registry=https://mirrors.cloud.tencent.com/npm/</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> init</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> arena-project</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>最后，使用正确的命令来初始化你的项目。</p></li></ul><p>通过遵循上述步骤，你应该能够解决在部署 Arena-Ts 时遇到的 Node.js 相关问题。</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("bestPractices/nodejsTest.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const nodejsTest = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  nodejsTest as default
};
