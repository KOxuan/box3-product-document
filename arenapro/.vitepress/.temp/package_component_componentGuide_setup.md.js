import { ssrRenderAttrs, ssrRenderStyle, ssrRenderAttr } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const _imports_0 = "/arenapro/QQ20250321-172825.png";
const __pageData = JSON.parse('{"title":"创建组件脚本","description":"","frontmatter":{},"headers":[],"relativePath":"package/component/componentGuide/setup.md","filePath":"package/component/componentGuide/setup.md","lastUpdated":1742559233000}');
const _sfc_main = { name: "package/component/componentGuide/setup.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="创建组件脚本" tabindex="-1">创建组件脚本 <a class="header-anchor" href="#创建组件脚本" aria-label="Permalink to &quot;创建组件脚本&quot;">​</a></h1><p>本指南将帮助你快速设置和创建神岛引擎的组件脚本。通过组件化开发，你可以更好地组织和管理游戏代码。</p><h2 id="安装组件库" tabindex="-1">安装组件库 <a class="header-anchor" href="#安装组件库" aria-label="Permalink to &quot;安装组件库&quot;">​</a></h2><p>你可以通过以下两种方式安装 <code>@dao3fun/component</code> 组件库：</p><h3 id="方式一-使用-arenapro-插件安装-推荐" tabindex="-1">方式一：使用 ArenaPro 插件安装（推荐） <a class="header-anchor" href="#方式一-使用-arenapro-插件安装-推荐" aria-label="Permalink to &quot;方式一：使用 ArenaPro 插件安装（推荐）&quot;">​</a></h3><ol><li>在 VSCode 编辑器中，按下 <code>Ctrl + Shift + P</code>（Windows）或 <code>Command + Shift + P</code>（MacOS）打开命令面板</li><li>搜索 &quot;ArenaPro&quot; 并运行 <code>ArenaPro: 查看神岛NPM包</code> 命令</li><li>在弹出的输入框中输入 <code>component</code> 进行搜索</li><li>点击 <code>@dao3fun/component</code>，然后在左下角弹窗中点击&quot;确认安装&quot;</li><li>等待安装完成，VSCode 右下角会显示安装成功提示</li></ol><h3 id="方式二-使用-npm-命令行安装" tabindex="-1">方式二：使用 npm 命令行安装 <a class="header-anchor" href="#方式二-使用-npm-命令行安装" aria-label="Permalink to &quot;方式二：使用 npm 命令行安装&quot;">​</a></h3><p>在项目根目录下打开终端，运行以下命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">npm</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> install</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> @dao3fun/component</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="配置组件模板" tabindex="-1">配置组件模板 <a class="header-anchor" href="#配置组件模板" aria-label="Permalink to &quot;配置组件模板&quot;">​</a></h2><p>安装完成后，你可以配置自动生成组件模板的功能：</p><ol><li>打开项目根目录下的 <code>dao3.config.json</code> 文件</li><li>添加或修改 <code>ECS</code> 配置项：</li></ol><p><img${ssrRenderAttr("src", _imports_0)} alt="配置ECS属性"></p><p>配置完成后，每次创建新的 <code>.ts</code> 文件时都会自动生成组件模板代码。</p><h2 id="创建组件脚本-1" tabindex="-1">创建组件脚本 <a class="header-anchor" href="#创建组件脚本-1" aria-label="Permalink to &quot;创建组件脚本&quot;">​</a></h2><h3 id="自动创建-推荐" tabindex="-1">自动创建（推荐） <a class="header-anchor" href="#自动创建-推荐" aria-label="Permalink to &quot;自动创建（推荐）&quot;">​</a></h3><ol><li>在 VSCode 资源管理器中右键选择要创建脚本的目录</li><li>选择&quot;新建文件&quot;</li><li>输入文件名（以 <code>.ts</code> 结尾），如 <code>NewComponent.ts</code></li><li>按回车确认，将自动生成组件模板</li></ol><h3 id="组件模板结构" tabindex="-1">组件模板结构 <a class="header-anchor" href="#组件模板结构" aria-label="Permalink to &quot;组件模板结构&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> { _decorator, Component, EntityNode } </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">from</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;@dao3fun/component&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> { </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">apclass</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> } </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> _decorator;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">@</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">apclass</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;NewComponent&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">export</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> class</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> NewComponent</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> extends</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> Component</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">GameEntity</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt; {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">  // 组件初始化时调用</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">  start</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">    // 在这里初始化组件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">  // 每帧更新时调用</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">  update</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">deltaTime</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">:</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> number</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">    // 在这里编写更新逻辑</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="开发注意事项" tabindex="-1">开发注意事项 <a class="header-anchor" href="#开发注意事项" aria-label="Permalink to &quot;开发注意事项&quot;">​</a></h2><h3 id="_1-类名唯一性" tabindex="-1">1. 类名唯一性 <a class="header-anchor" href="#_1-类名唯一性" aria-label="Permalink to &quot;1. 类名唯一性&quot;">​</a></h3><ul><li>整个项目中的组件类名必须唯一</li><li>即使在不同目录下也不能重复</li><li>建议使用描述性的类名，如 <code>PlayerMovement</code>、<code>EnemyAI</code> 等</li></ul><h3 id="_2-装饰器使用" tabindex="-1">2. 装饰器使用 <a class="header-anchor" href="#_2-装饰器使用" aria-label="Permalink to &quot;2. 装饰器使用&quot;">​</a></h3><ul><li>必须使用 <code>@apclass</code> 装饰器定义组件类</li><li>装饰器参数应与类名保持一致</li><li>示例：</li></ul><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">@</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">apclass</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;PlayerController&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">export</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> class</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> PlayerController</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> extends</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> Component</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">GameEntity</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt; {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">  // ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-文件命名规范" tabindex="-1">3. 文件命名规范 <a class="header-anchor" href="#_3-文件命名规范" aria-label="Permalink to &quot;3. 文件命名规范&quot;">​</a></h3><ul><li>文件名应与组件类名完全一致</li><li>使用 PascalCase 命名法</li><li>例如：<code>PlayerController.ts</code>、<code>EnemySpawner.ts</code></li></ul><h3 id="_4-typescript-优势" tabindex="-1">4. TypeScript 优势 <a class="header-anchor" href="#_4-typescript-优势" aria-label="Permalink to &quot;4. TypeScript 优势&quot;">​</a></h3><p>我们强烈推荐使用 TypeScript 编写组件：</p><ul><li>更好的类型检查</li><li>智能代码提示</li><li>更容易发现潜在错误</li><li>更好的代码维护性</li></ul><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><ol><li><p><strong>Q: 为什么我的组件模板没有自动生成？</strong></p><p>A: 请检查 <code>dao3.config.json</code> 中的 <code>ECS</code> 配置是否正确设置为 <code>true</code></p></li><li><p><strong>Q: 组件类名重复了怎么办？</strong></p><p>A: 修改其中一个类名，确保项目中的所有组件类名都是唯一的</p></li><li><p><strong>Q: 如何调试组件代码？</strong></p><p>A: 使用 VSCode 的调试功能，设置断点并启动调试模式</p></li></ol></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("package/component/componentGuide/setup.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const setup = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  setup as default
};
