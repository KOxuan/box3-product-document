import { ssrRenderAttrs, ssrRenderAttr, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const _imports_0 = "/arenapro/QQ20241202-222614.png";
const _imports_1 = "/arenapro/QQ20241202-222905.png";
const __pageData = JSON.parse('{"title":"Debug模式详解","description":"","frontmatter":{},"headers":[],"relativePath":"guide/four/debug.md","filePath":"guide/four/debug.md","lastUpdated":1733151138000}');
const _sfc_main = { name: "guide/four/debug.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="debug模式详解" tabindex="-1">Debug模式详解 <a class="header-anchor" href="#debug模式详解" aria-label="Permalink to &quot;Debug模式详解&quot;">​</a></h1><p>在开发游戏或应用时，Debug模式是一个非常重要的工具，它能够帮助创作者快速定位并解决问题。</p><ul><li>关闭Debug模式时，生成的代码是经过<code>压缩和混淆</code>的。</li></ul><p><img${ssrRenderAttr("src", _imports_0)} alt=""></p><ul><li>开启Debug模式后，生成的代码是<code>未压缩和混淆</code>的。</li></ul><p><img${ssrRenderAttr("src", _imports_1)} alt=""></p><h2 id="debug模式的作用" tabindex="-1">Debug模式的作用 <a class="header-anchor" href="#debug模式的作用" aria-label="Permalink to &quot;Debug模式的作用&quot;">​</a></h2><p>Debug模式主要用于<code>开发阶段</code>，它允许创作者在神岛环境/VSCode中直接进行调试。与生产环境相比，Debug模式生成的代码是<code>未经压缩和混淆</code>的，这使得代码更易于阅读和理解。此外，Debug模式还提供了更详细的错误信息和堆栈跟踪，有助于创作者快速定位问题所在。</p><p>然而，需要注意的是，由于Debug模式生成的代码体积较大且未经优化，因此在生产环境中使用可能会带来性能上的影响及潜在的安全风险。因此，我们强烈建议仅在开发阶段启用Debug模式，并在发布前切换到生产模式以确保应用的最佳性能和安全性。</p><h2 id="开启debug模式的步骤" tabindex="-1">开启Debug模式的步骤 <a class="header-anchor" href="#开启debug模式的步骤" aria-label="Permalink to &quot;开启Debug模式的步骤&quot;">​</a></h2><h3 id="第一步-修改dao3-config-json文件" tabindex="-1">第一步：修改<code>dao3.config.json</code>文件 <a class="header-anchor" href="#第一步-修改dao3-config-json文件" aria-label="Permalink to &quot;第一步：修改\`dao3.config.json\`文件&quot;">​</a></h3><p>在项目中，找到并打开<code>dao3.config.json</code>文件。这个文件包含了神岛项目的各种配置信息。</p><ol><li>打开<code>dao3.config.json</code>文件。</li><li>找到与当前端（如客户端或服务端）相关的配置部分。</li><li>将<code>developmentAll</code>或<code>development</code>属性的值改为<code>true</code>，以启用Debug模式。</li></ol><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">    &quot;ArenaPro&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">        &quot;file&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">            &quot;typescript&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">                &quot;server&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">                    &quot;development&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"> // 服务端开启debug代码</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">                },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">                &quot;client&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">                    &quot;development&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"> // 服务端开启debug代码</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">                },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">                &quot;developmentAll&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">null</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// 开启服务端和客户端debug代码，优先级最高，null表示忽略该属性。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">            }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="第二步-构建项目并查看生成的js文件" tabindex="-1">第二步：构建项目并查看生成的JS文件 <a class="header-anchor" href="#第二步-构建项目并查看生成的js文件" aria-label="Permalink to &quot;第二步：构建项目并查看生成的JS文件&quot;">​</a></h3><p>保存<code>dao3.config.json</code>文件后，需要重新构建项目以使配置生效。</p><ol><li>构建完成后，进入<code>dist</code>文件夹中查看生成的捆绑JS文件。</li><li>你会发现生成的JS文件是未经压缩和混淆的，代码易于阅读。</li></ol><h3 id="第三步-在地图中调试代码" tabindex="-1">第三步：在地图中调试代码 <a class="header-anchor" href="#第三步-在地图中调试代码" aria-label="Permalink to &quot;第三步：在地图中调试代码&quot;">​</a></h3><p>启用Debug模式后，你可以在神岛环境/VSCode中直接运行和调试代码。</p><ol><li>打开神岛创作端并加载你的项目。</li><li>运行地图以查看效果。</li><li>如果代码中存在错误或问题，创作端将显示错误信息和堆栈跟踪。</li><li>点击错误信息中的链接或文件名，可以跳转到出错的代码行，并进行调试和修改。</li></ol><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li>在Debug模式下，直接修改生成的JS文件并不是一个好的做法。因为JS文件是由TS编译生成的，直接修改JS文件可能会导致代码不一致和难以维护。</li><li>如果你使用的是TypeScript（TS），请确保在修改源代码后重新构建项目以使更改生效。</li><li>在发布前，请确保将<code>development</code>属性设置为<code>false</code>以切换到生产模式，并重新构建项目以生成压缩和混淆后的代码。</li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("guide/four/debug.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const debug = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  debug as default
};
