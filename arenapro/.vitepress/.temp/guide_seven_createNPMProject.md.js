import { ssrRenderAttrs, ssrRenderAttr } from "vue/server-renderer";
import { _ as _imports_0, a as _imports_2, b as _imports_4, c as _imports_5, d as _imports_10 } from "./QQ20241128-221728.iCj5Czd1.js";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const _imports_1 = "/arenapro/QQ20241130-113045.png";
const _imports_3 = "/arenapro/QQ20241130-113114.png";
const _imports_6 = "/arenapro/QQ20241130-113312.png";
const _imports_7 = "/arenapro/QQ20241130-113416.png";
const _imports_8 = "/arenapro/QQ20241130-113521.png";
const _imports_9 = "/arenapro/QQ20241130-113642.png";
const _imports_11 = "/arenapro/QQ20241130-114602.png";
const __pageData = JSON.parse('{"title":"创建神岛组件库项目","description":"","frontmatter":{},"headers":[],"relativePath":"guide/seven/createNPMProject.md","filePath":"guide/seven/createNPMProject.md","lastUpdated":1732942230000}');
const _sfc_main = { name: "guide/seven/createNPMProject.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="创建神岛组件库项目" tabindex="-1">创建神岛组件库项目 <a class="header-anchor" href="#创建神岛组件库项目" aria-label="Permalink to &quot;创建神岛组件库项目&quot;">​</a></h1><p>在ArenaPro插件中，创作者不仅可以着手打造独特的地图项目，还能够创建神岛组件库，这一平台专为存放和分享可复用的代码组件而设计。这些组件能够轻松地被其他创作者导入并应用，极大地提升了开发效率与代码复用性。</p><p>若你希望深入了解如何<a href="/arenapro/guide/six/npmPackage.html">安装npm包</a>，请查阅相关指南。</p><h2 id="项目文件夹的创建" tabindex="-1">项目文件夹的创建 <a class="header-anchor" href="#项目文件夹的创建" aria-label="Permalink to &quot;项目文件夹的创建&quot;">​</a></h2><h3 id="步骤一-新建空文件夹" tabindex="-1">步骤一：新建空文件夹 <a class="header-anchor" href="#步骤一-新建空文件夹" aria-label="Permalink to &quot;步骤一：新建空文件夹&quot;">​</a></h3><p>首先，你需要在你的文件系统中新建一个空文件夹，作为你的神岛组件库项目的根目录。</p><p><img${ssrRenderAttr("src", _imports_0)} alt="创建空文件夹"></p><h3 id="步骤二-文件夹命名" tabindex="-1">步骤二：文件夹命名 <a class="header-anchor" href="#步骤二-文件夹命名" aria-label="Permalink to &quot;步骤二：文件夹命名&quot;">​</a></h3><p>为确保项目能够顺利编译，<strong>请务必使用纯英文为项目文件夹命名</strong>，避免使用非法字符、中文及空格。</p><ul><li><strong>项目名称</strong>：Arena智能输出</li><li><strong>英文名</strong>：arena-rich</li></ul><p><img${ssrRenderAttr("src", _imports_1)} alt="项目命名"></p><h2 id="打开项目" tabindex="-1">打开项目 <a class="header-anchor" href="#打开项目" aria-label="Permalink to &quot;打开项目&quot;">​</a></h2><h3 id="步骤-在编辑器中导入文件夹" tabindex="-1">步骤：在编辑器中导入文件夹 <a class="header-anchor" href="#步骤-在编辑器中导入文件夹" aria-label="Permalink to &quot;步骤：在编辑器中导入文件夹&quot;">​</a></h3><p>接下来，请打开你的VSCode编辑器，并通过以下路径导入你刚刚创建的文件夹：<code>文件(File)</code> -&gt; <code>打开文件夹(Open Folder)</code> -&gt; 选择你的项目文件夹。</p><p><img${ssrRenderAttr("src", _imports_2)} alt="打开文件夹"></p><p>导入后，你的项目结构应如下所示：</p><p><img${ssrRenderAttr("src", _imports_3)} alt="导入后效果"></p><h2 id="新建arena-ts项目" tabindex="-1">新建Arena-Ts项目 <a class="header-anchor" href="#新建arena-ts项目" aria-label="Permalink to &quot;新建Arena-Ts项目&quot;">​</a></h2><p>在VSCode中，你可以通过按下<code>F1</code>或<code>Shift+Ctrl+P</code>（Mac用户请按<code>Shift+Cmd+P</code>）调出命令面板。在命令面板中，输入<code>arena-ts</code>，并选择<code>新建Arena-Ts项目(Create new Arena-Ts Project)</code>选项。</p><p><img${ssrRenderAttr("src", _imports_4)} alt="新建Arena-Ts项目"></p><p>随后，脚手架将引导你完成项目的创建过程。</p><p><img${ssrRenderAttr("src", _imports_5)} alt="项目创建中"></p><p>在创建过程中，脚手架会询问一些配置问题，请根据你的个人习惯进行选择。特别地，当被问及项目类型时，请务必选择<code>神岛组件库</code>。</p><p><img${ssrRenderAttr("src", _imports_6)} alt="选择项目类型"></p><p>选择完成后，按<code>Enter</code>键确认。脚手架将开始创建文件，并可能询问你关于<code>package.json</code>文件的一些信息。若你无需填写，直接按<code>Enter</code>键跳过即可。</p><p><img${ssrRenderAttr("src", _imports_7)} alt="填写package.json信息"></p><p>接下来，脚手架将安装项目开发及编译所需的依赖包。请耐心等待创建过程完成。</p><p>当终端显示如下信息时，表示项目已成功安装：</p><p><img${ssrRenderAttr("src", _imports_8)} alt="项目安装成功"></p><p>若你在安装过程中遇到任何问题，请参考：<a href="/arenapro/bestPractices/nodejsTest.html">NodeJS 部署Arena-Ts问题解决方案</a>。</p><p>此刻，你的神岛组件库项目已成功创建！</p><p><img${ssrRenderAttr("src", _imports_9)} alt="Arena-Ts项目创建成功"></p><h2 id="验证项目" tabindex="-1">验证项目 <a class="header-anchor" href="#验证项目" aria-label="Permalink to &quot;验证项目&quot;">​</a></h2><p>在安装完脚手架之后，你需要验证项目的正常运行。为此，只需点击编辑器左下角的<code>完整构建项目</code>按钮。</p><p>若项目构建成功，你将在终端窗口中看到如下提示信息：</p><p><img${ssrRenderAttr("src", _imports_10)} alt="构建成功"></p><h2 id="与神岛地图项目的差异" tabindex="-1">与神岛地图项目的差异 <a class="header-anchor" href="#与神岛地图项目的差异" aria-label="Permalink to &quot;与神岛地图项目的差异&quot;">​</a></h2><p>虽然神岛组件库项目与神岛地图项目在结构上相似，都包含服务端和客户端脚本入口，但为了满足npm包的规范与统一要求，神岛组件库项目中的包不能同时包含客户端和服务端的代码。</p><p>在<code>package.json</code>文件中，<code>main</code>字段将自动配置为指向服务端或客户端的脚本入口（具体取决于脚手架的选择）。同时，<code>types</code>字段将指向入口文件的类型提示文件，而<code>files</code>字段则只包含服务端或客户端打包后的代码。</p><p>此外，<code>dao3.config.json</code>文件中的<code>npmPackage</code>属性将用于指定构建的端，并停止构建另一端以加快速度。</p><p>最后，项目还将生成npm包所需的<code>README.md</code>模板。</p><h2 id="后期如何更换端" tabindex="-1">后期如何更换端 <a class="header-anchor" href="#后期如何更换端" aria-label="Permalink to &quot;后期如何更换端&quot;">​</a></h2><p>若你需要在后期更换项目的类型（例如从服务端切换到客户端），只需打开<code>package.json</code>文件，并点击右上角的设置按钮进行快速切换。</p><p>它会根据配置的<code>dao3.config.json</code>文件来判断入口，并自动进行切换。</p><p><img${ssrRenderAttr("src", _imports_11)} alt="更换项目类型"></p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("guide/seven/createNPMProject.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const createNPMProject = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  createNPMProject as default
};
